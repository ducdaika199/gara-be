
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Reparis
 * 
 */
export type Reparis = $Result.DefaultSelection<Prisma.$ReparisPayload>
/**
 * Model Supplies
 * 
 */
export type Supplies = $Result.DefaultSelection<Prisma.$SuppliesPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model InvoiceRepair
 * 
 */
export type InvoiceRepair = $Result.DefaultSelection<Prisma.$InvoiceRepairPayload>
/**
 * Model InvoiceSupplie
 * 
 */
export type InvoiceSupplie = $Result.DefaultSelection<Prisma.$InvoiceSuppliePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.reparis`: Exposes CRUD operations for the **Reparis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reparises
    * const reparises = await prisma.reparis.findMany()
    * ```
    */
  get reparis(): Prisma.ReparisDelegate<ExtArgs>;

  /**
   * `prisma.supplies`: Exposes CRUD operations for the **Supplies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supplies
    * const supplies = await prisma.supplies.findMany()
    * ```
    */
  get supplies(): Prisma.SuppliesDelegate<ExtArgs>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs>;

  /**
   * `prisma.invoiceRepair`: Exposes CRUD operations for the **InvoiceRepair** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceRepairs
    * const invoiceRepairs = await prisma.invoiceRepair.findMany()
    * ```
    */
  get invoiceRepair(): Prisma.InvoiceRepairDelegate<ExtArgs>;

  /**
   * `prisma.invoiceSupplie`: Exposes CRUD operations for the **InvoiceSupplie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvoiceSupplies
    * const invoiceSupplies = await prisma.invoiceSupplie.findMany()
    * ```
    */
  get invoiceSupplie(): Prisma.InvoiceSupplieDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.9.1
   * Query Engine version: 23fdc5965b1e05fc54e5f26ed3de66776b93de64
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Reparis: 'Reparis',
    Supplies: 'Supplies',
    Invoice: 'Invoice',
    InvoiceRepair: 'InvoiceRepair',
    InvoiceSupplie: 'InvoiceSupplie'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'reparis' | 'supplies' | 'invoice' | 'invoiceRepair' | 'invoiceSupplie'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Reparis: {
        payload: Prisma.$ReparisPayload<ExtArgs>
        fields: Prisma.ReparisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReparisFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReparisFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          findFirst: {
            args: Prisma.ReparisFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReparisFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          findMany: {
            args: Prisma.ReparisFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>[]
          }
          create: {
            args: Prisma.ReparisCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          createMany: {
            args: Prisma.ReparisCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReparisDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          update: {
            args: Prisma.ReparisUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          deleteMany: {
            args: Prisma.ReparisDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReparisUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReparisUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReparisPayload>
          }
          aggregate: {
            args: Prisma.ReparisAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReparis>
          }
          groupBy: {
            args: Prisma.ReparisGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReparisGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReparisCountArgs<ExtArgs>,
            result: $Utils.Optional<ReparisCountAggregateOutputType> | number
          }
        }
      }
      Supplies: {
        payload: Prisma.$SuppliesPayload<ExtArgs>
        fields: Prisma.SuppliesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuppliesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuppliesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          findFirst: {
            args: Prisma.SuppliesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuppliesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          findMany: {
            args: Prisma.SuppliesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>[]
          }
          create: {
            args: Prisma.SuppliesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          createMany: {
            args: Prisma.SuppliesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SuppliesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          update: {
            args: Prisma.SuppliesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          deleteMany: {
            args: Prisma.SuppliesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SuppliesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SuppliesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuppliesPayload>
          }
          aggregate: {
            args: Prisma.SuppliesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSupplies>
          }
          groupBy: {
            args: Prisma.SuppliesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuppliesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuppliesCountArgs<ExtArgs>,
            result: $Utils.Optional<SuppliesCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      InvoiceRepair: {
        payload: Prisma.$InvoiceRepairPayload<ExtArgs>
        fields: Prisma.InvoiceRepairFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceRepairFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceRepairFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          findFirst: {
            args: Prisma.InvoiceRepairFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceRepairFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          findMany: {
            args: Prisma.InvoiceRepairFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>[]
          }
          create: {
            args: Prisma.InvoiceRepairCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          createMany: {
            args: Prisma.InvoiceRepairCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvoiceRepairDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          update: {
            args: Prisma.InvoiceRepairUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          deleteMany: {
            args: Prisma.InvoiceRepairDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceRepairUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvoiceRepairUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceRepairPayload>
          }
          aggregate: {
            args: Prisma.InvoiceRepairAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvoiceRepair>
          }
          groupBy: {
            args: Prisma.InvoiceRepairGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceRepairGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceRepairCountArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceRepairCountAggregateOutputType> | number
          }
        }
      }
      InvoiceSupplie: {
        payload: Prisma.$InvoiceSuppliePayload<ExtArgs>
        fields: Prisma.InvoiceSupplieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceSupplieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceSupplieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          findFirst: {
            args: Prisma.InvoiceSupplieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceSupplieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          findMany: {
            args: Prisma.InvoiceSupplieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>[]
          }
          create: {
            args: Prisma.InvoiceSupplieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          createMany: {
            args: Prisma.InvoiceSupplieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvoiceSupplieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          update: {
            args: Prisma.InvoiceSupplieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceSupplieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceSupplieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvoiceSupplieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvoiceSuppliePayload>
          }
          aggregate: {
            args: Prisma.InvoiceSupplieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvoiceSupplie>
          }
          groupBy: {
            args: Prisma.InvoiceSupplieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceSupplieGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceSupplieCountArgs<ExtArgs>,
            result: $Utils.Optional<InvoiceSupplieCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    invoices: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoices?: boolean | UserCountOutputTypeCountInvoicesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }



  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    repairs: number
    supplies: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    repairs?: boolean | InvoiceCountOutputTypeCountRepairsArgs
    supplies?: boolean | InvoiceCountOutputTypeCountSuppliesArgs
  }

  // Custom InputTypes

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountRepairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceRepairWhereInput
  }


  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountSuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceSupplieWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    code: string | null
    phoneNumber: string | null
    plateNumber: string | null
    address: string | null
    carName: string | null
    carType: string | null
    joinDate: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    code: string | null
    phoneNumber: string | null
    plateNumber: string | null
    address: string | null
    carName: string | null
    carType: string | null
    joinDate: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    code: number
    phoneNumber: number
    plateNumber: number
    address: number
    carName: number
    carType: number
    joinDate: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    code?: true
    phoneNumber?: true
    plateNumber?: true
    address?: true
    carName?: true
    carType?: true
    joinDate?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    code?: true
    phoneNumber?: true
    plateNumber?: true
    address?: true
    carName?: true
    carType?: true
    joinDate?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    code?: true
    phoneNumber?: true
    plateNumber?: true
    address?: true
    carName?: true
    carType?: true
    joinDate?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName: string | null
    carType: string | null
    joinDate: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    code?: boolean
    phoneNumber?: boolean
    plateNumber?: boolean
    address?: boolean
    carName?: boolean
    carType?: boolean
    joinDate?: boolean
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    code?: boolean
    phoneNumber?: boolean
    plateNumber?: boolean
    address?: boolean
    carName?: boolean
    carType?: boolean
    joinDate?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string | null
      name: string
      code: string
      phoneNumber: string
      plateNumber: string
      address: string
      carName: string | null
      carType: string | null
      joinDate: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    invoices<T extends User$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, User$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly code: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly plateNumber: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly carName: FieldRef<"User", 'String'>
    readonly carType: FieldRef<"User", 'String'>
    readonly joinDate: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.invoices
   */
  export type User$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Reparis
   */

  export type AggregateReparis = {
    _count: ReparisCountAggregateOutputType | null
    _avg: ReparisAvgAggregateOutputType | null
    _sum: ReparisSumAggregateOutputType | null
    _min: ReparisMinAggregateOutputType | null
    _max: ReparisMaxAggregateOutputType | null
  }

  export type ReparisAvgAggregateOutputType = {
    id: number | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type ReparisSumAggregateOutputType = {
    id: number | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type ReparisMinAggregateOutputType = {
    id: number | null
    repairsCode: string | null
    description: string | null
    countUnit: string | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type ReparisMaxAggregateOutputType = {
    id: number | null
    repairsCode: string | null
    description: string | null
    countUnit: string | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type ReparisCountAggregateOutputType = {
    id: number
    repairsCode: number
    description: number
    countUnit: number
    priceUnit: number
    ck: number
    tax: number
    _all: number
  }


  export type ReparisAvgAggregateInputType = {
    id?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type ReparisSumAggregateInputType = {
    id?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type ReparisMinAggregateInputType = {
    id?: true
    repairsCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type ReparisMaxAggregateInputType = {
    id?: true
    repairsCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type ReparisCountAggregateInputType = {
    id?: true
    repairsCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
    _all?: true
  }

  export type ReparisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reparis to aggregate.
     */
    where?: ReparisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reparises to fetch.
     */
    orderBy?: ReparisOrderByWithRelationInput | ReparisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReparisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reparises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reparises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reparises
    **/
    _count?: true | ReparisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReparisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReparisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReparisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReparisMaxAggregateInputType
  }

  export type GetReparisAggregateType<T extends ReparisAggregateArgs> = {
        [P in keyof T & keyof AggregateReparis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReparis[P]>
      : GetScalarType<T[P], AggregateReparis[P]>
  }




  export type ReparisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReparisWhereInput
    orderBy?: ReparisOrderByWithAggregationInput | ReparisOrderByWithAggregationInput[]
    by: ReparisScalarFieldEnum[] | ReparisScalarFieldEnum
    having?: ReparisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReparisCountAggregateInputType | true
    _avg?: ReparisAvgAggregateInputType
    _sum?: ReparisSumAggregateInputType
    _min?: ReparisMinAggregateInputType
    _max?: ReparisMaxAggregateInputType
  }

  export type ReparisGroupByOutputType = {
    id: number
    repairsCode: string
    description: string | null
    countUnit: string | null
    priceUnit: Decimal
    ck: Decimal
    tax: Decimal
    _count: ReparisCountAggregateOutputType | null
    _avg: ReparisAvgAggregateOutputType | null
    _sum: ReparisSumAggregateOutputType | null
    _min: ReparisMinAggregateOutputType | null
    _max: ReparisMaxAggregateOutputType | null
  }

  type GetReparisGroupByPayload<T extends ReparisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReparisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReparisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReparisGroupByOutputType[P]>
            : GetScalarType<T[P], ReparisGroupByOutputType[P]>
        }
      >
    >


  export type ReparisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repairsCode?: boolean
    description?: boolean
    countUnit?: boolean
    priceUnit?: boolean
    ck?: boolean
    tax?: boolean
  }, ExtArgs["result"]["reparis"]>

  export type ReparisSelectScalar = {
    id?: boolean
    repairsCode?: boolean
    description?: boolean
    countUnit?: boolean
    priceUnit?: boolean
    ck?: boolean
    tax?: boolean
  }


  export type $ReparisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reparis"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      repairsCode: string
      description: string | null
      countUnit: string | null
      priceUnit: Prisma.Decimal
      ck: Prisma.Decimal
      tax: Prisma.Decimal
    }, ExtArgs["result"]["reparis"]>
    composites: {}
  }


  type ReparisGetPayload<S extends boolean | null | undefined | ReparisDefaultArgs> = $Result.GetResult<Prisma.$ReparisPayload, S>

  type ReparisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReparisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReparisCountAggregateInputType | true
    }

  export interface ReparisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reparis'], meta: { name: 'Reparis' } }
    /**
     * Find zero or one Reparis that matches the filter.
     * @param {ReparisFindUniqueArgs} args - Arguments to find a Reparis
     * @example
     * // Get one Reparis
     * const reparis = await prisma.reparis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReparisFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisFindUniqueArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reparis that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReparisFindUniqueOrThrowArgs} args - Arguments to find a Reparis
     * @example
     * // Get one Reparis
     * const reparis = await prisma.reparis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReparisFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reparis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisFindFirstArgs} args - Arguments to find a Reparis
     * @example
     * // Get one Reparis
     * const reparis = await prisma.reparis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReparisFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisFindFirstArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reparis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisFindFirstOrThrowArgs} args - Arguments to find a Reparis
     * @example
     * // Get one Reparis
     * const reparis = await prisma.reparis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReparisFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reparises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reparises
     * const reparises = await prisma.reparis.findMany()
     * 
     * // Get first 10 Reparises
     * const reparises = await prisma.reparis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reparisWithIdOnly = await prisma.reparis.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReparisFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reparis.
     * @param {ReparisCreateArgs} args - Arguments to create a Reparis.
     * @example
     * // Create one Reparis
     * const Reparis = await prisma.reparis.create({
     *   data: {
     *     // ... data to create a Reparis
     *   }
     * })
     * 
    **/
    create<T extends ReparisCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisCreateArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reparises.
     *     @param {ReparisCreateManyArgs} args - Arguments to create many Reparises.
     *     @example
     *     // Create many Reparises
     *     const reparis = await prisma.reparis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReparisCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reparis.
     * @param {ReparisDeleteArgs} args - Arguments to delete one Reparis.
     * @example
     * // Delete one Reparis
     * const Reparis = await prisma.reparis.delete({
     *   where: {
     *     // ... filter to delete one Reparis
     *   }
     * })
     * 
    **/
    delete<T extends ReparisDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisDeleteArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reparis.
     * @param {ReparisUpdateArgs} args - Arguments to update one Reparis.
     * @example
     * // Update one Reparis
     * const reparis = await prisma.reparis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReparisUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisUpdateArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reparises.
     * @param {ReparisDeleteManyArgs} args - Arguments to filter Reparises to delete.
     * @example
     * // Delete a few Reparises
     * const { count } = await prisma.reparis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReparisDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReparisDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reparises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reparises
     * const reparis = await prisma.reparis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReparisUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reparis.
     * @param {ReparisUpsertArgs} args - Arguments to update or create a Reparis.
     * @example
     * // Update or create a Reparis
     * const reparis = await prisma.reparis.upsert({
     *   create: {
     *     // ... data to create a Reparis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reparis we want to update
     *   }
     * })
    **/
    upsert<T extends ReparisUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReparisUpsertArgs<ExtArgs>>
    ): Prisma__ReparisClient<$Result.GetResult<Prisma.$ReparisPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reparises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisCountArgs} args - Arguments to filter Reparises to count.
     * @example
     * // Count the number of Reparises
     * const count = await prisma.reparis.count({
     *   where: {
     *     // ... the filter for the Reparises we want to count
     *   }
     * })
    **/
    count<T extends ReparisCountArgs>(
      args?: Subset<T, ReparisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReparisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reparis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReparisAggregateArgs>(args: Subset<T, ReparisAggregateArgs>): Prisma.PrismaPromise<GetReparisAggregateType<T>>

    /**
     * Group by Reparis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReparisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReparisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReparisGroupByArgs['orderBy'] }
        : { orderBy?: ReparisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReparisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReparisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reparis model
   */
  readonly fields: ReparisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reparis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReparisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reparis model
   */ 
  interface ReparisFieldRefs {
    readonly id: FieldRef<"Reparis", 'Int'>
    readonly repairsCode: FieldRef<"Reparis", 'String'>
    readonly description: FieldRef<"Reparis", 'String'>
    readonly countUnit: FieldRef<"Reparis", 'String'>
    readonly priceUnit: FieldRef<"Reparis", 'Decimal'>
    readonly ck: FieldRef<"Reparis", 'Decimal'>
    readonly tax: FieldRef<"Reparis", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * Reparis findUnique
   */
  export type ReparisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter, which Reparis to fetch.
     */
    where: ReparisWhereUniqueInput
  }


  /**
   * Reparis findUniqueOrThrow
   */
  export type ReparisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter, which Reparis to fetch.
     */
    where: ReparisWhereUniqueInput
  }


  /**
   * Reparis findFirst
   */
  export type ReparisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter, which Reparis to fetch.
     */
    where?: ReparisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reparises to fetch.
     */
    orderBy?: ReparisOrderByWithRelationInput | ReparisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reparises.
     */
    cursor?: ReparisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reparises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reparises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reparises.
     */
    distinct?: ReparisScalarFieldEnum | ReparisScalarFieldEnum[]
  }


  /**
   * Reparis findFirstOrThrow
   */
  export type ReparisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter, which Reparis to fetch.
     */
    where?: ReparisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reparises to fetch.
     */
    orderBy?: ReparisOrderByWithRelationInput | ReparisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reparises.
     */
    cursor?: ReparisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reparises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reparises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reparises.
     */
    distinct?: ReparisScalarFieldEnum | ReparisScalarFieldEnum[]
  }


  /**
   * Reparis findMany
   */
  export type ReparisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter, which Reparises to fetch.
     */
    where?: ReparisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reparises to fetch.
     */
    orderBy?: ReparisOrderByWithRelationInput | ReparisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reparises.
     */
    cursor?: ReparisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reparises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reparises.
     */
    skip?: number
    distinct?: ReparisScalarFieldEnum | ReparisScalarFieldEnum[]
  }


  /**
   * Reparis create
   */
  export type ReparisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * The data needed to create a Reparis.
     */
    data: XOR<ReparisCreateInput, ReparisUncheckedCreateInput>
  }


  /**
   * Reparis createMany
   */
  export type ReparisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reparises.
     */
    data: ReparisCreateManyInput | ReparisCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reparis update
   */
  export type ReparisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * The data needed to update a Reparis.
     */
    data: XOR<ReparisUpdateInput, ReparisUncheckedUpdateInput>
    /**
     * Choose, which Reparis to update.
     */
    where: ReparisWhereUniqueInput
  }


  /**
   * Reparis updateMany
   */
  export type ReparisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reparises.
     */
    data: XOR<ReparisUpdateManyMutationInput, ReparisUncheckedUpdateManyInput>
    /**
     * Filter which Reparises to update
     */
    where?: ReparisWhereInput
  }


  /**
   * Reparis upsert
   */
  export type ReparisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * The filter to search for the Reparis to update in case it exists.
     */
    where: ReparisWhereUniqueInput
    /**
     * In case the Reparis found by the `where` argument doesn't exist, create a new Reparis with this data.
     */
    create: XOR<ReparisCreateInput, ReparisUncheckedCreateInput>
    /**
     * In case the Reparis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReparisUpdateInput, ReparisUncheckedUpdateInput>
  }


  /**
   * Reparis delete
   */
  export type ReparisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
    /**
     * Filter which Reparis to delete.
     */
    where: ReparisWhereUniqueInput
  }


  /**
   * Reparis deleteMany
   */
  export type ReparisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reparises to delete
     */
    where?: ReparisWhereInput
  }


  /**
   * Reparis without action
   */
  export type ReparisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reparis
     */
    select?: ReparisSelect<ExtArgs> | null
  }



  /**
   * Model Supplies
   */

  export type AggregateSupplies = {
    _count: SuppliesCountAggregateOutputType | null
    _avg: SuppliesAvgAggregateOutputType | null
    _sum: SuppliesSumAggregateOutputType | null
    _min: SuppliesMinAggregateOutputType | null
    _max: SuppliesMaxAggregateOutputType | null
  }

  export type SuppliesAvgAggregateOutputType = {
    id: number | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type SuppliesSumAggregateOutputType = {
    id: number | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type SuppliesMinAggregateOutputType = {
    id: number | null
    suppliesCode: string | null
    description: string | null
    countUnit: string | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type SuppliesMaxAggregateOutputType = {
    id: number | null
    suppliesCode: string | null
    description: string | null
    countUnit: string | null
    priceUnit: Decimal | null
    ck: Decimal | null
    tax: Decimal | null
  }

  export type SuppliesCountAggregateOutputType = {
    id: number
    suppliesCode: number
    description: number
    countUnit: number
    priceUnit: number
    ck: number
    tax: number
    _all: number
  }


  export type SuppliesAvgAggregateInputType = {
    id?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type SuppliesSumAggregateInputType = {
    id?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type SuppliesMinAggregateInputType = {
    id?: true
    suppliesCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type SuppliesMaxAggregateInputType = {
    id?: true
    suppliesCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
  }

  export type SuppliesCountAggregateInputType = {
    id?: true
    suppliesCode?: true
    description?: true
    countUnit?: true
    priceUnit?: true
    ck?: true
    tax?: true
    _all?: true
  }

  export type SuppliesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplies to aggregate.
     */
    where?: SuppliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SuppliesOrderByWithRelationInput | SuppliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuppliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Supplies
    **/
    _count?: true | SuppliesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuppliesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuppliesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuppliesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuppliesMaxAggregateInputType
  }

  export type GetSuppliesAggregateType<T extends SuppliesAggregateArgs> = {
        [P in keyof T & keyof AggregateSupplies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupplies[P]>
      : GetScalarType<T[P], AggregateSupplies[P]>
  }




  export type SuppliesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuppliesWhereInput
    orderBy?: SuppliesOrderByWithAggregationInput | SuppliesOrderByWithAggregationInput[]
    by: SuppliesScalarFieldEnum[] | SuppliesScalarFieldEnum
    having?: SuppliesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuppliesCountAggregateInputType | true
    _avg?: SuppliesAvgAggregateInputType
    _sum?: SuppliesSumAggregateInputType
    _min?: SuppliesMinAggregateInputType
    _max?: SuppliesMaxAggregateInputType
  }

  export type SuppliesGroupByOutputType = {
    id: number
    suppliesCode: string
    description: string | null
    countUnit: string | null
    priceUnit: Decimal
    ck: Decimal
    tax: Decimal
    _count: SuppliesCountAggregateOutputType | null
    _avg: SuppliesAvgAggregateOutputType | null
    _sum: SuppliesSumAggregateOutputType | null
    _min: SuppliesMinAggregateOutputType | null
    _max: SuppliesMaxAggregateOutputType | null
  }

  type GetSuppliesGroupByPayload<T extends SuppliesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuppliesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuppliesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuppliesGroupByOutputType[P]>
            : GetScalarType<T[P], SuppliesGroupByOutputType[P]>
        }
      >
    >


  export type SuppliesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    suppliesCode?: boolean
    description?: boolean
    countUnit?: boolean
    priceUnit?: boolean
    ck?: boolean
    tax?: boolean
  }, ExtArgs["result"]["supplies"]>

  export type SuppliesSelectScalar = {
    id?: boolean
    suppliesCode?: boolean
    description?: boolean
    countUnit?: boolean
    priceUnit?: boolean
    ck?: boolean
    tax?: boolean
  }


  export type $SuppliesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Supplies"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      suppliesCode: string
      description: string | null
      countUnit: string | null
      priceUnit: Prisma.Decimal
      ck: Prisma.Decimal
      tax: Prisma.Decimal
    }, ExtArgs["result"]["supplies"]>
    composites: {}
  }


  type SuppliesGetPayload<S extends boolean | null | undefined | SuppliesDefaultArgs> = $Result.GetResult<Prisma.$SuppliesPayload, S>

  type SuppliesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SuppliesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SuppliesCountAggregateInputType | true
    }

  export interface SuppliesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Supplies'], meta: { name: 'Supplies' } }
    /**
     * Find zero or one Supplies that matches the filter.
     * @param {SuppliesFindUniqueArgs} args - Arguments to find a Supplies
     * @example
     * // Get one Supplies
     * const supplies = await prisma.supplies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuppliesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesFindUniqueArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Supplies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SuppliesFindUniqueOrThrowArgs} args - Arguments to find a Supplies
     * @example
     * // Get one Supplies
     * const supplies = await prisma.supplies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuppliesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Supplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesFindFirstArgs} args - Arguments to find a Supplies
     * @example
     * // Get one Supplies
     * const supplies = await prisma.supplies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuppliesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesFindFirstArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Supplies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesFindFirstOrThrowArgs} args - Arguments to find a Supplies
     * @example
     * // Get one Supplies
     * const supplies = await prisma.supplies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuppliesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Supplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supplies
     * const supplies = await prisma.supplies.findMany()
     * 
     * // Get first 10 Supplies
     * const supplies = await prisma.supplies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suppliesWithIdOnly = await prisma.supplies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuppliesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Supplies.
     * @param {SuppliesCreateArgs} args - Arguments to create a Supplies.
     * @example
     * // Create one Supplies
     * const Supplies = await prisma.supplies.create({
     *   data: {
     *     // ... data to create a Supplies
     *   }
     * })
     * 
    **/
    create<T extends SuppliesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesCreateArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Supplies.
     *     @param {SuppliesCreateManyArgs} args - Arguments to create many Supplies.
     *     @example
     *     // Create many Supplies
     *     const supplies = await prisma.supplies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuppliesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Supplies.
     * @param {SuppliesDeleteArgs} args - Arguments to delete one Supplies.
     * @example
     * // Delete one Supplies
     * const Supplies = await prisma.supplies.delete({
     *   where: {
     *     // ... filter to delete one Supplies
     *   }
     * })
     * 
    **/
    delete<T extends SuppliesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesDeleteArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Supplies.
     * @param {SuppliesUpdateArgs} args - Arguments to update one Supplies.
     * @example
     * // Update one Supplies
     * const supplies = await prisma.supplies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuppliesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesUpdateArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Supplies.
     * @param {SuppliesDeleteManyArgs} args - Arguments to filter Supplies to delete.
     * @example
     * // Delete a few Supplies
     * const { count } = await prisma.supplies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuppliesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuppliesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supplies
     * const supplies = await prisma.supplies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuppliesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Supplies.
     * @param {SuppliesUpsertArgs} args - Arguments to update or create a Supplies.
     * @example
     * // Update or create a Supplies
     * const supplies = await prisma.supplies.upsert({
     *   create: {
     *     // ... data to create a Supplies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Supplies we want to update
     *   }
     * })
    **/
    upsert<T extends SuppliesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SuppliesUpsertArgs<ExtArgs>>
    ): Prisma__SuppliesClient<$Result.GetResult<Prisma.$SuppliesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesCountArgs} args - Arguments to filter Supplies to count.
     * @example
     * // Count the number of Supplies
     * const count = await prisma.supplies.count({
     *   where: {
     *     // ... the filter for the Supplies we want to count
     *   }
     * })
    **/
    count<T extends SuppliesCountArgs>(
      args?: Subset<T, SuppliesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuppliesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuppliesAggregateArgs>(args: Subset<T, SuppliesAggregateArgs>): Prisma.PrismaPromise<GetSuppliesAggregateType<T>>

    /**
     * Group by Supplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuppliesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuppliesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuppliesGroupByArgs['orderBy'] }
        : { orderBy?: SuppliesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuppliesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuppliesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Supplies model
   */
  readonly fields: SuppliesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Supplies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuppliesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Supplies model
   */ 
  interface SuppliesFieldRefs {
    readonly id: FieldRef<"Supplies", 'Int'>
    readonly suppliesCode: FieldRef<"Supplies", 'String'>
    readonly description: FieldRef<"Supplies", 'String'>
    readonly countUnit: FieldRef<"Supplies", 'String'>
    readonly priceUnit: FieldRef<"Supplies", 'Decimal'>
    readonly ck: FieldRef<"Supplies", 'Decimal'>
    readonly tax: FieldRef<"Supplies", 'Decimal'>
  }
    

  // Custom InputTypes

  /**
   * Supplies findUnique
   */
  export type SuppliesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where: SuppliesWhereUniqueInput
  }


  /**
   * Supplies findUniqueOrThrow
   */
  export type SuppliesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where: SuppliesWhereUniqueInput
  }


  /**
   * Supplies findFirst
   */
  export type SuppliesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where?: SuppliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SuppliesOrderByWithRelationInput | SuppliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supplies.
     */
    cursor?: SuppliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supplies.
     */
    distinct?: SuppliesScalarFieldEnum | SuppliesScalarFieldEnum[]
  }


  /**
   * Supplies findFirstOrThrow
   */
  export type SuppliesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where?: SuppliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SuppliesOrderByWithRelationInput | SuppliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supplies.
     */
    cursor?: SuppliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supplies.
     */
    distinct?: SuppliesScalarFieldEnum | SuppliesScalarFieldEnum[]
  }


  /**
   * Supplies findMany
   */
  export type SuppliesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter, which Supplies to fetch.
     */
    where?: SuppliesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supplies to fetch.
     */
    orderBy?: SuppliesOrderByWithRelationInput | SuppliesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Supplies.
     */
    cursor?: SuppliesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supplies.
     */
    skip?: number
    distinct?: SuppliesScalarFieldEnum | SuppliesScalarFieldEnum[]
  }


  /**
   * Supplies create
   */
  export type SuppliesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * The data needed to create a Supplies.
     */
    data: XOR<SuppliesCreateInput, SuppliesUncheckedCreateInput>
  }


  /**
   * Supplies createMany
   */
  export type SuppliesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Supplies.
     */
    data: SuppliesCreateManyInput | SuppliesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Supplies update
   */
  export type SuppliesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * The data needed to update a Supplies.
     */
    data: XOR<SuppliesUpdateInput, SuppliesUncheckedUpdateInput>
    /**
     * Choose, which Supplies to update.
     */
    where: SuppliesWhereUniqueInput
  }


  /**
   * Supplies updateMany
   */
  export type SuppliesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Supplies.
     */
    data: XOR<SuppliesUpdateManyMutationInput, SuppliesUncheckedUpdateManyInput>
    /**
     * Filter which Supplies to update
     */
    where?: SuppliesWhereInput
  }


  /**
   * Supplies upsert
   */
  export type SuppliesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * The filter to search for the Supplies to update in case it exists.
     */
    where: SuppliesWhereUniqueInput
    /**
     * In case the Supplies found by the `where` argument doesn't exist, create a new Supplies with this data.
     */
    create: XOR<SuppliesCreateInput, SuppliesUncheckedCreateInput>
    /**
     * In case the Supplies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuppliesUpdateInput, SuppliesUncheckedUpdateInput>
  }


  /**
   * Supplies delete
   */
  export type SuppliesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
    /**
     * Filter which Supplies to delete.
     */
    where: SuppliesWhereUniqueInput
  }


  /**
   * Supplies deleteMany
   */
  export type SuppliesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supplies to delete
     */
    where?: SuppliesWhereInput
  }


  /**
   * Supplies without action
   */
  export type SuppliesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Supplies
     */
    select?: SuppliesSelect<ExtArgs> | null
  }



  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    userRequest: string | null
    userId: number | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    userRequest: string | null
    userId: number | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    userRequest: number
    userId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    userRequest?: true
    userId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    userRequest?: true
    userId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    userRequest?: true
    userId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    userRequest: string | null
    userId: number
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userRequest?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    repairs?: boolean | Invoice$repairsArgs<ExtArgs>
    supplies?: boolean | Invoice$suppliesArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    userRequest?: boolean
    userId?: boolean
  }

  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    repairs?: boolean | Invoice$repairsArgs<ExtArgs>
    supplies?: boolean | Invoice$suppliesArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      repairs: Prisma.$InvoiceRepairPayload<ExtArgs>[]
      supplies: Prisma.$InvoiceSuppliePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userRequest: string | null
      userId: number
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }


  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Invoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
    **/
    create<T extends InvoiceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Invoices.
     *     @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     *     @example
     *     // Create many Invoices
     *     const invoice = await prisma.invoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>
    ): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    repairs<T extends Invoice$repairsArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$repairsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findMany'> | Null>;

    supplies<T extends Invoice$suppliesArgs<ExtArgs> = {}>(args?: Subset<T, Invoice$suppliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Invoice model
   */ 
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'Int'>
    readonly userRequest: FieldRef<"Invoice", 'String'>
    readonly userId: FieldRef<"Invoice", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }


  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }


  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }


  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }


  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
  }


  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }


  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }


  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
  }


  /**
   * Invoice.repairs
   */
  export type Invoice$repairsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    where?: InvoiceRepairWhereInput
    orderBy?: InvoiceRepairOrderByWithRelationInput | InvoiceRepairOrderByWithRelationInput[]
    cursor?: InvoiceRepairWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceRepairScalarFieldEnum | InvoiceRepairScalarFieldEnum[]
  }


  /**
   * Invoice.supplies
   */
  export type Invoice$suppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    where?: InvoiceSupplieWhereInput
    orderBy?: InvoiceSupplieOrderByWithRelationInput | InvoiceSupplieOrderByWithRelationInput[]
    cursor?: InvoiceSupplieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceSupplieScalarFieldEnum | InvoiceSupplieScalarFieldEnum[]
  }


  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceInclude<ExtArgs> | null
  }



  /**
   * Model InvoiceRepair
   */

  export type AggregateInvoiceRepair = {
    _count: InvoiceRepairCountAggregateOutputType | null
    _avg: InvoiceRepairAvgAggregateOutputType | null
    _sum: InvoiceRepairSumAggregateOutputType | null
    _min: InvoiceRepairMinAggregateOutputType | null
    _max: InvoiceRepairMaxAggregateOutputType | null
  }

  export type InvoiceRepairAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
  }

  export type InvoiceRepairSumAggregateOutputType = {
    id: number | null
    invoiceId: number | null
  }

  export type InvoiceRepairMinAggregateOutputType = {
    id: number | null
    repairId: string | null
    unit: string | null
    invoiceId: number | null
  }

  export type InvoiceRepairMaxAggregateOutputType = {
    id: number | null
    repairId: string | null
    unit: string | null
    invoiceId: number | null
  }

  export type InvoiceRepairCountAggregateOutputType = {
    id: number
    repairId: number
    unit: number
    invoiceId: number
    _all: number
  }


  export type InvoiceRepairAvgAggregateInputType = {
    id?: true
    invoiceId?: true
  }

  export type InvoiceRepairSumAggregateInputType = {
    id?: true
    invoiceId?: true
  }

  export type InvoiceRepairMinAggregateInputType = {
    id?: true
    repairId?: true
    unit?: true
    invoiceId?: true
  }

  export type InvoiceRepairMaxAggregateInputType = {
    id?: true
    repairId?: true
    unit?: true
    invoiceId?: true
  }

  export type InvoiceRepairCountAggregateInputType = {
    id?: true
    repairId?: true
    unit?: true
    invoiceId?: true
    _all?: true
  }

  export type InvoiceRepairAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceRepair to aggregate.
     */
    where?: InvoiceRepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceRepairs to fetch.
     */
    orderBy?: InvoiceRepairOrderByWithRelationInput | InvoiceRepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceRepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceRepairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceRepairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceRepairs
    **/
    _count?: true | InvoiceRepairCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceRepairAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceRepairSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceRepairMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceRepairMaxAggregateInputType
  }

  export type GetInvoiceRepairAggregateType<T extends InvoiceRepairAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceRepair]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceRepair[P]>
      : GetScalarType<T[P], AggregateInvoiceRepair[P]>
  }




  export type InvoiceRepairGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceRepairWhereInput
    orderBy?: InvoiceRepairOrderByWithAggregationInput | InvoiceRepairOrderByWithAggregationInput[]
    by: InvoiceRepairScalarFieldEnum[] | InvoiceRepairScalarFieldEnum
    having?: InvoiceRepairScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceRepairCountAggregateInputType | true
    _avg?: InvoiceRepairAvgAggregateInputType
    _sum?: InvoiceRepairSumAggregateInputType
    _min?: InvoiceRepairMinAggregateInputType
    _max?: InvoiceRepairMaxAggregateInputType
  }

  export type InvoiceRepairGroupByOutputType = {
    id: number
    repairId: string
    unit: string
    invoiceId: number
    _count: InvoiceRepairCountAggregateOutputType | null
    _avg: InvoiceRepairAvgAggregateOutputType | null
    _sum: InvoiceRepairSumAggregateOutputType | null
    _min: InvoiceRepairMinAggregateOutputType | null
    _max: InvoiceRepairMaxAggregateOutputType | null
  }

  type GetInvoiceRepairGroupByPayload<T extends InvoiceRepairGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceRepairGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceRepairGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceRepairGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceRepairGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceRepairSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    repairId?: boolean
    unit?: boolean
    invoiceId?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceRepair"]>

  export type InvoiceRepairSelectScalar = {
    id?: boolean
    repairId?: boolean
    unit?: boolean
    invoiceId?: boolean
  }

  export type InvoiceRepairInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }


  export type $InvoiceRepairPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceRepair"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      repairId: string
      unit: string
      invoiceId: number
    }, ExtArgs["result"]["invoiceRepair"]>
    composites: {}
  }


  type InvoiceRepairGetPayload<S extends boolean | null | undefined | InvoiceRepairDefaultArgs> = $Result.GetResult<Prisma.$InvoiceRepairPayload, S>

  type InvoiceRepairCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvoiceRepairFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvoiceRepairCountAggregateInputType | true
    }

  export interface InvoiceRepairDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceRepair'], meta: { name: 'InvoiceRepair' } }
    /**
     * Find zero or one InvoiceRepair that matches the filter.
     * @param {InvoiceRepairFindUniqueArgs} args - Arguments to find a InvoiceRepair
     * @example
     * // Get one InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceRepairFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairFindUniqueArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvoiceRepair that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceRepairFindUniqueOrThrowArgs} args - Arguments to find a InvoiceRepair
     * @example
     * // Get one InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceRepairFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvoiceRepair that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairFindFirstArgs} args - Arguments to find a InvoiceRepair
     * @example
     * // Get one InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceRepairFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairFindFirstArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvoiceRepair that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairFindFirstOrThrowArgs} args - Arguments to find a InvoiceRepair
     * @example
     * // Get one InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceRepairFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvoiceRepairs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceRepairs
     * const invoiceRepairs = await prisma.invoiceRepair.findMany()
     * 
     * // Get first 10 InvoiceRepairs
     * const invoiceRepairs = await prisma.invoiceRepair.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceRepairWithIdOnly = await prisma.invoiceRepair.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceRepairFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvoiceRepair.
     * @param {InvoiceRepairCreateArgs} args - Arguments to create a InvoiceRepair.
     * @example
     * // Create one InvoiceRepair
     * const InvoiceRepair = await prisma.invoiceRepair.create({
     *   data: {
     *     // ... data to create a InvoiceRepair
     *   }
     * })
     * 
    **/
    create<T extends InvoiceRepairCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairCreateArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvoiceRepairs.
     *     @param {InvoiceRepairCreateManyArgs} args - Arguments to create many InvoiceRepairs.
     *     @example
     *     // Create many InvoiceRepairs
     *     const invoiceRepair = await prisma.invoiceRepair.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceRepairCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceRepair.
     * @param {InvoiceRepairDeleteArgs} args - Arguments to delete one InvoiceRepair.
     * @example
     * // Delete one InvoiceRepair
     * const InvoiceRepair = await prisma.invoiceRepair.delete({
     *   where: {
     *     // ... filter to delete one InvoiceRepair
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceRepairDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairDeleteArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvoiceRepair.
     * @param {InvoiceRepairUpdateArgs} args - Arguments to update one InvoiceRepair.
     * @example
     * // Update one InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceRepairUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairUpdateArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvoiceRepairs.
     * @param {InvoiceRepairDeleteManyArgs} args - Arguments to filter InvoiceRepairs to delete.
     * @example
     * // Delete a few InvoiceRepairs
     * const { count } = await prisma.invoiceRepair.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceRepairDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceRepairDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceRepairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceRepairs
     * const invoiceRepair = await prisma.invoiceRepair.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceRepairUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceRepair.
     * @param {InvoiceRepairUpsertArgs} args - Arguments to update or create a InvoiceRepair.
     * @example
     * // Update or create a InvoiceRepair
     * const invoiceRepair = await prisma.invoiceRepair.upsert({
     *   create: {
     *     // ... data to create a InvoiceRepair
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceRepair we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceRepairUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceRepairUpsertArgs<ExtArgs>>
    ): Prisma__InvoiceRepairClient<$Result.GetResult<Prisma.$InvoiceRepairPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvoiceRepairs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairCountArgs} args - Arguments to filter InvoiceRepairs to count.
     * @example
     * // Count the number of InvoiceRepairs
     * const count = await prisma.invoiceRepair.count({
     *   where: {
     *     // ... the filter for the InvoiceRepairs we want to count
     *   }
     * })
    **/
    count<T extends InvoiceRepairCountArgs>(
      args?: Subset<T, InvoiceRepairCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceRepairCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceRepair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceRepairAggregateArgs>(args: Subset<T, InvoiceRepairAggregateArgs>): Prisma.PrismaPromise<GetInvoiceRepairAggregateType<T>>

    /**
     * Group by InvoiceRepair.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceRepairGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceRepairGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceRepairGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceRepairGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceRepairGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceRepairGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceRepair model
   */
  readonly fields: InvoiceRepairFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceRepair.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceRepairClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvoiceRepair model
   */ 
  interface InvoiceRepairFieldRefs {
    readonly id: FieldRef<"InvoiceRepair", 'Int'>
    readonly repairId: FieldRef<"InvoiceRepair", 'String'>
    readonly unit: FieldRef<"InvoiceRepair", 'String'>
    readonly invoiceId: FieldRef<"InvoiceRepair", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * InvoiceRepair findUnique
   */
  export type InvoiceRepairFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceRepair to fetch.
     */
    where: InvoiceRepairWhereUniqueInput
  }


  /**
   * InvoiceRepair findUniqueOrThrow
   */
  export type InvoiceRepairFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceRepair to fetch.
     */
    where: InvoiceRepairWhereUniqueInput
  }


  /**
   * InvoiceRepair findFirst
   */
  export type InvoiceRepairFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceRepair to fetch.
     */
    where?: InvoiceRepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceRepairs to fetch.
     */
    orderBy?: InvoiceRepairOrderByWithRelationInput | InvoiceRepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceRepairs.
     */
    cursor?: InvoiceRepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceRepairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceRepairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceRepairs.
     */
    distinct?: InvoiceRepairScalarFieldEnum | InvoiceRepairScalarFieldEnum[]
  }


  /**
   * InvoiceRepair findFirstOrThrow
   */
  export type InvoiceRepairFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceRepair to fetch.
     */
    where?: InvoiceRepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceRepairs to fetch.
     */
    orderBy?: InvoiceRepairOrderByWithRelationInput | InvoiceRepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceRepairs.
     */
    cursor?: InvoiceRepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceRepairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceRepairs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceRepairs.
     */
    distinct?: InvoiceRepairScalarFieldEnum | InvoiceRepairScalarFieldEnum[]
  }


  /**
   * InvoiceRepair findMany
   */
  export type InvoiceRepairFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceRepairs to fetch.
     */
    where?: InvoiceRepairWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceRepairs to fetch.
     */
    orderBy?: InvoiceRepairOrderByWithRelationInput | InvoiceRepairOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceRepairs.
     */
    cursor?: InvoiceRepairWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceRepairs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceRepairs.
     */
    skip?: number
    distinct?: InvoiceRepairScalarFieldEnum | InvoiceRepairScalarFieldEnum[]
  }


  /**
   * InvoiceRepair create
   */
  export type InvoiceRepairCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceRepair.
     */
    data: XOR<InvoiceRepairCreateInput, InvoiceRepairUncheckedCreateInput>
  }


  /**
   * InvoiceRepair createMany
   */
  export type InvoiceRepairCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceRepairs.
     */
    data: InvoiceRepairCreateManyInput | InvoiceRepairCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvoiceRepair update
   */
  export type InvoiceRepairUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceRepair.
     */
    data: XOR<InvoiceRepairUpdateInput, InvoiceRepairUncheckedUpdateInput>
    /**
     * Choose, which InvoiceRepair to update.
     */
    where: InvoiceRepairWhereUniqueInput
  }


  /**
   * InvoiceRepair updateMany
   */
  export type InvoiceRepairUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceRepairs.
     */
    data: XOR<InvoiceRepairUpdateManyMutationInput, InvoiceRepairUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceRepairs to update
     */
    where?: InvoiceRepairWhereInput
  }


  /**
   * InvoiceRepair upsert
   */
  export type InvoiceRepairUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceRepair to update in case it exists.
     */
    where: InvoiceRepairWhereUniqueInput
    /**
     * In case the InvoiceRepair found by the `where` argument doesn't exist, create a new InvoiceRepair with this data.
     */
    create: XOR<InvoiceRepairCreateInput, InvoiceRepairUncheckedCreateInput>
    /**
     * In case the InvoiceRepair was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceRepairUpdateInput, InvoiceRepairUncheckedUpdateInput>
  }


  /**
   * InvoiceRepair delete
   */
  export type InvoiceRepairDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
    /**
     * Filter which InvoiceRepair to delete.
     */
    where: InvoiceRepairWhereUniqueInput
  }


  /**
   * InvoiceRepair deleteMany
   */
  export type InvoiceRepairDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceRepairs to delete
     */
    where?: InvoiceRepairWhereInput
  }


  /**
   * InvoiceRepair without action
   */
  export type InvoiceRepairDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceRepair
     */
    select?: InvoiceRepairSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceRepairInclude<ExtArgs> | null
  }



  /**
   * Model InvoiceSupplie
   */

  export type AggregateInvoiceSupplie = {
    _count: InvoiceSupplieCountAggregateOutputType | null
    _avg: InvoiceSupplieAvgAggregateOutputType | null
    _sum: InvoiceSupplieSumAggregateOutputType | null
    _min: InvoiceSupplieMinAggregateOutputType | null
    _max: InvoiceSupplieMaxAggregateOutputType | null
  }

  export type InvoiceSupplieAvgAggregateOutputType = {
    id: number | null
    invoiceId: number | null
  }

  export type InvoiceSupplieSumAggregateOutputType = {
    id: number | null
    invoiceId: number | null
  }

  export type InvoiceSupplieMinAggregateOutputType = {
    id: number | null
    supplieId: string | null
    unit: string | null
    invoiceId: number | null
  }

  export type InvoiceSupplieMaxAggregateOutputType = {
    id: number | null
    supplieId: string | null
    unit: string | null
    invoiceId: number | null
  }

  export type InvoiceSupplieCountAggregateOutputType = {
    id: number
    supplieId: number
    unit: number
    invoiceId: number
    _all: number
  }


  export type InvoiceSupplieAvgAggregateInputType = {
    id?: true
    invoiceId?: true
  }

  export type InvoiceSupplieSumAggregateInputType = {
    id?: true
    invoiceId?: true
  }

  export type InvoiceSupplieMinAggregateInputType = {
    id?: true
    supplieId?: true
    unit?: true
    invoiceId?: true
  }

  export type InvoiceSupplieMaxAggregateInputType = {
    id?: true
    supplieId?: true
    unit?: true
    invoiceId?: true
  }

  export type InvoiceSupplieCountAggregateInputType = {
    id?: true
    supplieId?: true
    unit?: true
    invoiceId?: true
    _all?: true
  }

  export type InvoiceSupplieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceSupplie to aggregate.
     */
    where?: InvoiceSupplieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceSupplies to fetch.
     */
    orderBy?: InvoiceSupplieOrderByWithRelationInput | InvoiceSupplieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceSupplieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvoiceSupplies
    **/
    _count?: true | InvoiceSupplieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceSupplieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSupplieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceSupplieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceSupplieMaxAggregateInputType
  }

  export type GetInvoiceSupplieAggregateType<T extends InvoiceSupplieAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoiceSupplie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoiceSupplie[P]>
      : GetScalarType<T[P], AggregateInvoiceSupplie[P]>
  }




  export type InvoiceSupplieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceSupplieWhereInput
    orderBy?: InvoiceSupplieOrderByWithAggregationInput | InvoiceSupplieOrderByWithAggregationInput[]
    by: InvoiceSupplieScalarFieldEnum[] | InvoiceSupplieScalarFieldEnum
    having?: InvoiceSupplieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceSupplieCountAggregateInputType | true
    _avg?: InvoiceSupplieAvgAggregateInputType
    _sum?: InvoiceSupplieSumAggregateInputType
    _min?: InvoiceSupplieMinAggregateInputType
    _max?: InvoiceSupplieMaxAggregateInputType
  }

  export type InvoiceSupplieGroupByOutputType = {
    id: number
    supplieId: string
    unit: string
    invoiceId: number
    _count: InvoiceSupplieCountAggregateOutputType | null
    _avg: InvoiceSupplieAvgAggregateOutputType | null
    _sum: InvoiceSupplieSumAggregateOutputType | null
    _min: InvoiceSupplieMinAggregateOutputType | null
    _max: InvoiceSupplieMaxAggregateOutputType | null
  }

  type GetInvoiceSupplieGroupByPayload<T extends InvoiceSupplieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceSupplieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceSupplieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceSupplieGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceSupplieGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSupplieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    supplieId?: boolean
    unit?: boolean
    invoiceId?: boolean
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoiceSupplie"]>

  export type InvoiceSupplieSelectScalar = {
    id?: boolean
    supplieId?: boolean
    unit?: boolean
    invoiceId?: boolean
  }

  export type InvoiceSupplieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoice?: boolean | InvoiceDefaultArgs<ExtArgs>
  }


  export type $InvoiceSuppliePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvoiceSupplie"
    objects: {
      invoice: Prisma.$InvoicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      supplieId: string
      unit: string
      invoiceId: number
    }, ExtArgs["result"]["invoiceSupplie"]>
    composites: {}
  }


  type InvoiceSupplieGetPayload<S extends boolean | null | undefined | InvoiceSupplieDefaultArgs> = $Result.GetResult<Prisma.$InvoiceSuppliePayload, S>

  type InvoiceSupplieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvoiceSupplieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvoiceSupplieCountAggregateInputType | true
    }

  export interface InvoiceSupplieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvoiceSupplie'], meta: { name: 'InvoiceSupplie' } }
    /**
     * Find zero or one InvoiceSupplie that matches the filter.
     * @param {InvoiceSupplieFindUniqueArgs} args - Arguments to find a InvoiceSupplie
     * @example
     * // Get one InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvoiceSupplieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieFindUniqueArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InvoiceSupplie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InvoiceSupplieFindUniqueOrThrowArgs} args - Arguments to find a InvoiceSupplie
     * @example
     * // Get one InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvoiceSupplieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InvoiceSupplie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieFindFirstArgs} args - Arguments to find a InvoiceSupplie
     * @example
     * // Get one InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvoiceSupplieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieFindFirstArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InvoiceSupplie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieFindFirstOrThrowArgs} args - Arguments to find a InvoiceSupplie
     * @example
     * // Get one InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvoiceSupplieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InvoiceSupplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvoiceSupplies
     * const invoiceSupplies = await prisma.invoiceSupplie.findMany()
     * 
     * // Get first 10 InvoiceSupplies
     * const invoiceSupplies = await prisma.invoiceSupplie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceSupplieWithIdOnly = await prisma.invoiceSupplie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvoiceSupplieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InvoiceSupplie.
     * @param {InvoiceSupplieCreateArgs} args - Arguments to create a InvoiceSupplie.
     * @example
     * // Create one InvoiceSupplie
     * const InvoiceSupplie = await prisma.invoiceSupplie.create({
     *   data: {
     *     // ... data to create a InvoiceSupplie
     *   }
     * })
     * 
    **/
    create<T extends InvoiceSupplieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieCreateArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InvoiceSupplies.
     *     @param {InvoiceSupplieCreateManyArgs} args - Arguments to create many InvoiceSupplies.
     *     @example
     *     // Create many InvoiceSupplies
     *     const invoiceSupplie = await prisma.invoiceSupplie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InvoiceSupplieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InvoiceSupplie.
     * @param {InvoiceSupplieDeleteArgs} args - Arguments to delete one InvoiceSupplie.
     * @example
     * // Delete one InvoiceSupplie
     * const InvoiceSupplie = await prisma.invoiceSupplie.delete({
     *   where: {
     *     // ... filter to delete one InvoiceSupplie
     *   }
     * })
     * 
    **/
    delete<T extends InvoiceSupplieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieDeleteArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InvoiceSupplie.
     * @param {InvoiceSupplieUpdateArgs} args - Arguments to update one InvoiceSupplie.
     * @example
     * // Update one InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvoiceSupplieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieUpdateArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InvoiceSupplies.
     * @param {InvoiceSupplieDeleteManyArgs} args - Arguments to filter InvoiceSupplies to delete.
     * @example
     * // Delete a few InvoiceSupplies
     * const { count } = await prisma.invoiceSupplie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvoiceSupplieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvoiceSupplieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvoiceSupplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvoiceSupplies
     * const invoiceSupplie = await prisma.invoiceSupplie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvoiceSupplieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InvoiceSupplie.
     * @param {InvoiceSupplieUpsertArgs} args - Arguments to update or create a InvoiceSupplie.
     * @example
     * // Update or create a InvoiceSupplie
     * const invoiceSupplie = await prisma.invoiceSupplie.upsert({
     *   create: {
     *     // ... data to create a InvoiceSupplie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvoiceSupplie we want to update
     *   }
     * })
    **/
    upsert<T extends InvoiceSupplieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvoiceSupplieUpsertArgs<ExtArgs>>
    ): Prisma__InvoiceSupplieClient<$Result.GetResult<Prisma.$InvoiceSuppliePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InvoiceSupplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieCountArgs} args - Arguments to filter InvoiceSupplies to count.
     * @example
     * // Count the number of InvoiceSupplies
     * const count = await prisma.invoiceSupplie.count({
     *   where: {
     *     // ... the filter for the InvoiceSupplies we want to count
     *   }
     * })
    **/
    count<T extends InvoiceSupplieCountArgs>(
      args?: Subset<T, InvoiceSupplieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceSupplieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvoiceSupplie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceSupplieAggregateArgs>(args: Subset<T, InvoiceSupplieAggregateArgs>): Prisma.PrismaPromise<GetInvoiceSupplieAggregateType<T>>

    /**
     * Group by InvoiceSupplie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceSupplieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceSupplieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceSupplieGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceSupplieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceSupplieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceSupplieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvoiceSupplie model
   */
  readonly fields: InvoiceSupplieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvoiceSupplie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceSupplieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    invoice<T extends InvoiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvoiceDefaultArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InvoiceSupplie model
   */ 
  interface InvoiceSupplieFieldRefs {
    readonly id: FieldRef<"InvoiceSupplie", 'Int'>
    readonly supplieId: FieldRef<"InvoiceSupplie", 'String'>
    readonly unit: FieldRef<"InvoiceSupplie", 'String'>
    readonly invoiceId: FieldRef<"InvoiceSupplie", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * InvoiceSupplie findUnique
   */
  export type InvoiceSupplieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceSupplie to fetch.
     */
    where: InvoiceSupplieWhereUniqueInput
  }


  /**
   * InvoiceSupplie findUniqueOrThrow
   */
  export type InvoiceSupplieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceSupplie to fetch.
     */
    where: InvoiceSupplieWhereUniqueInput
  }


  /**
   * InvoiceSupplie findFirst
   */
  export type InvoiceSupplieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceSupplie to fetch.
     */
    where?: InvoiceSupplieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceSupplies to fetch.
     */
    orderBy?: InvoiceSupplieOrderByWithRelationInput | InvoiceSupplieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceSupplies.
     */
    cursor?: InvoiceSupplieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceSupplies.
     */
    distinct?: InvoiceSupplieScalarFieldEnum | InvoiceSupplieScalarFieldEnum[]
  }


  /**
   * InvoiceSupplie findFirstOrThrow
   */
  export type InvoiceSupplieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceSupplie to fetch.
     */
    where?: InvoiceSupplieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceSupplies to fetch.
     */
    orderBy?: InvoiceSupplieOrderByWithRelationInput | InvoiceSupplieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvoiceSupplies.
     */
    cursor?: InvoiceSupplieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceSupplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvoiceSupplies.
     */
    distinct?: InvoiceSupplieScalarFieldEnum | InvoiceSupplieScalarFieldEnum[]
  }


  /**
   * InvoiceSupplie findMany
   */
  export type InvoiceSupplieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter, which InvoiceSupplies to fetch.
     */
    where?: InvoiceSupplieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvoiceSupplies to fetch.
     */
    orderBy?: InvoiceSupplieOrderByWithRelationInput | InvoiceSupplieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvoiceSupplies.
     */
    cursor?: InvoiceSupplieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvoiceSupplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvoiceSupplies.
     */
    skip?: number
    distinct?: InvoiceSupplieScalarFieldEnum | InvoiceSupplieScalarFieldEnum[]
  }


  /**
   * InvoiceSupplie create
   */
  export type InvoiceSupplieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * The data needed to create a InvoiceSupplie.
     */
    data: XOR<InvoiceSupplieCreateInput, InvoiceSupplieUncheckedCreateInput>
  }


  /**
   * InvoiceSupplie createMany
   */
  export type InvoiceSupplieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvoiceSupplies.
     */
    data: InvoiceSupplieCreateManyInput | InvoiceSupplieCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InvoiceSupplie update
   */
  export type InvoiceSupplieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * The data needed to update a InvoiceSupplie.
     */
    data: XOR<InvoiceSupplieUpdateInput, InvoiceSupplieUncheckedUpdateInput>
    /**
     * Choose, which InvoiceSupplie to update.
     */
    where: InvoiceSupplieWhereUniqueInput
  }


  /**
   * InvoiceSupplie updateMany
   */
  export type InvoiceSupplieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvoiceSupplies.
     */
    data: XOR<InvoiceSupplieUpdateManyMutationInput, InvoiceSupplieUncheckedUpdateManyInput>
    /**
     * Filter which InvoiceSupplies to update
     */
    where?: InvoiceSupplieWhereInput
  }


  /**
   * InvoiceSupplie upsert
   */
  export type InvoiceSupplieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * The filter to search for the InvoiceSupplie to update in case it exists.
     */
    where: InvoiceSupplieWhereUniqueInput
    /**
     * In case the InvoiceSupplie found by the `where` argument doesn't exist, create a new InvoiceSupplie with this data.
     */
    create: XOR<InvoiceSupplieCreateInput, InvoiceSupplieUncheckedCreateInput>
    /**
     * In case the InvoiceSupplie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceSupplieUpdateInput, InvoiceSupplieUncheckedUpdateInput>
  }


  /**
   * InvoiceSupplie delete
   */
  export type InvoiceSupplieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
    /**
     * Filter which InvoiceSupplie to delete.
     */
    where: InvoiceSupplieWhereUniqueInput
  }


  /**
   * InvoiceSupplie deleteMany
   */
  export type InvoiceSupplieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvoiceSupplies to delete
     */
    where?: InvoiceSupplieWhereInput
  }


  /**
   * InvoiceSupplie without action
   */
  export type InvoiceSupplieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceSupplie
     */
    select?: InvoiceSupplieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InvoiceSupplieInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    code: 'code',
    phoneNumber: 'phoneNumber',
    plateNumber: 'plateNumber',
    address: 'address',
    carName: 'carName',
    carType: 'carType',
    joinDate: 'joinDate'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReparisScalarFieldEnum: {
    id: 'id',
    repairsCode: 'repairsCode',
    description: 'description',
    countUnit: 'countUnit',
    priceUnit: 'priceUnit',
    ck: 'ck',
    tax: 'tax'
  };

  export type ReparisScalarFieldEnum = (typeof ReparisScalarFieldEnum)[keyof typeof ReparisScalarFieldEnum]


  export const SuppliesScalarFieldEnum: {
    id: 'id',
    suppliesCode: 'suppliesCode',
    description: 'description',
    countUnit: 'countUnit',
    priceUnit: 'priceUnit',
    ck: 'ck',
    tax: 'tax'
  };

  export type SuppliesScalarFieldEnum = (typeof SuppliesScalarFieldEnum)[keyof typeof SuppliesScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    userRequest: 'userRequest',
    userId: 'userId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const InvoiceRepairScalarFieldEnum: {
    id: 'id',
    repairId: 'repairId',
    unit: 'unit',
    invoiceId: 'invoiceId'
  };

  export type InvoiceRepairScalarFieldEnum = (typeof InvoiceRepairScalarFieldEnum)[keyof typeof InvoiceRepairScalarFieldEnum]


  export const InvoiceSupplieScalarFieldEnum: {
    id: 'id',
    supplieId: 'supplieId',
    unit: 'unit',
    invoiceId: 'invoiceId'
  };

  export type InvoiceSupplieScalarFieldEnum = (typeof InvoiceSupplieScalarFieldEnum)[keyof typeof InvoiceSupplieScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    code?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    plateNumber?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    carName?: StringNullableFilter<"User"> | string | null
    carType?: StringNullableFilter<"User"> | string | null
    joinDate?: DateTimeFilter<"User"> | Date | string
    invoices?: InvoiceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    code?: SortOrder
    phoneNumber?: SortOrder
    plateNumber?: SortOrder
    address?: SortOrder
    carName?: SortOrderInput | SortOrder
    carType?: SortOrderInput | SortOrder
    joinDate?: SortOrder
    invoices?: InvoiceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    code?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    plateNumber?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    carName?: StringNullableFilter<"User"> | string | null
    carType?: StringNullableFilter<"User"> | string | null
    joinDate?: DateTimeFilter<"User"> | Date | string
    invoices?: InvoiceListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    code?: SortOrder
    phoneNumber?: SortOrder
    plateNumber?: SortOrder
    address?: SortOrder
    carName?: SortOrderInput | SortOrder
    carType?: SortOrderInput | SortOrder
    joinDate?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    code?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    plateNumber?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    carName?: StringNullableWithAggregatesFilter<"User"> | string | null
    carType?: StringNullableWithAggregatesFilter<"User"> | string | null
    joinDate?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ReparisWhereInput = {
    AND?: ReparisWhereInput | ReparisWhereInput[]
    OR?: ReparisWhereInput[]
    NOT?: ReparisWhereInput | ReparisWhereInput[]
    id?: IntFilter<"Reparis"> | number
    repairsCode?: StringFilter<"Reparis"> | string
    description?: StringNullableFilter<"Reparis"> | string | null
    countUnit?: StringNullableFilter<"Reparis"> | string | null
    priceUnit?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
  }

  export type ReparisOrderByWithRelationInput = {
    id?: SortOrder
    repairsCode?: SortOrder
    description?: SortOrderInput | SortOrder
    countUnit?: SortOrderInput | SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type ReparisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReparisWhereInput | ReparisWhereInput[]
    OR?: ReparisWhereInput[]
    NOT?: ReparisWhereInput | ReparisWhereInput[]
    repairsCode?: StringFilter<"Reparis"> | string
    description?: StringNullableFilter<"Reparis"> | string | null
    countUnit?: StringNullableFilter<"Reparis"> | string | null
    priceUnit?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
  }, "id">

  export type ReparisOrderByWithAggregationInput = {
    id?: SortOrder
    repairsCode?: SortOrder
    description?: SortOrderInput | SortOrder
    countUnit?: SortOrderInput | SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
    _count?: ReparisCountOrderByAggregateInput
    _avg?: ReparisAvgOrderByAggregateInput
    _max?: ReparisMaxOrderByAggregateInput
    _min?: ReparisMinOrderByAggregateInput
    _sum?: ReparisSumOrderByAggregateInput
  }

  export type ReparisScalarWhereWithAggregatesInput = {
    AND?: ReparisScalarWhereWithAggregatesInput | ReparisScalarWhereWithAggregatesInput[]
    OR?: ReparisScalarWhereWithAggregatesInput[]
    NOT?: ReparisScalarWhereWithAggregatesInput | ReparisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reparis"> | number
    repairsCode?: StringWithAggregatesFilter<"Reparis"> | string
    description?: StringNullableWithAggregatesFilter<"Reparis"> | string | null
    countUnit?: StringNullableWithAggregatesFilter<"Reparis"> | string | null
    priceUnit?: DecimalWithAggregatesFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalWithAggregatesFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalWithAggregatesFilter<"Reparis"> | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesWhereInput = {
    AND?: SuppliesWhereInput | SuppliesWhereInput[]
    OR?: SuppliesWhereInput[]
    NOT?: SuppliesWhereInput | SuppliesWhereInput[]
    id?: IntFilter<"Supplies"> | number
    suppliesCode?: StringFilter<"Supplies"> | string
    description?: StringNullableFilter<"Supplies"> | string | null
    countUnit?: StringNullableFilter<"Supplies"> | string | null
    priceUnit?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesOrderByWithRelationInput = {
    id?: SortOrder
    suppliesCode?: SortOrder
    description?: SortOrderInput | SortOrder
    countUnit?: SortOrderInput | SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type SuppliesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SuppliesWhereInput | SuppliesWhereInput[]
    OR?: SuppliesWhereInput[]
    NOT?: SuppliesWhereInput | SuppliesWhereInput[]
    suppliesCode?: StringFilter<"Supplies"> | string
    description?: StringNullableFilter<"Supplies"> | string | null
    countUnit?: StringNullableFilter<"Supplies"> | string | null
    priceUnit?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
  }, "id">

  export type SuppliesOrderByWithAggregationInput = {
    id?: SortOrder
    suppliesCode?: SortOrder
    description?: SortOrderInput | SortOrder
    countUnit?: SortOrderInput | SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
    _count?: SuppliesCountOrderByAggregateInput
    _avg?: SuppliesAvgOrderByAggregateInput
    _max?: SuppliesMaxOrderByAggregateInput
    _min?: SuppliesMinOrderByAggregateInput
    _sum?: SuppliesSumOrderByAggregateInput
  }

  export type SuppliesScalarWhereWithAggregatesInput = {
    AND?: SuppliesScalarWhereWithAggregatesInput | SuppliesScalarWhereWithAggregatesInput[]
    OR?: SuppliesScalarWhereWithAggregatesInput[]
    NOT?: SuppliesScalarWhereWithAggregatesInput | SuppliesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Supplies"> | number
    suppliesCode?: StringWithAggregatesFilter<"Supplies"> | string
    description?: StringNullableWithAggregatesFilter<"Supplies"> | string | null
    countUnit?: StringNullableWithAggregatesFilter<"Supplies"> | string | null
    priceUnit?: DecimalWithAggregatesFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    ck?: DecimalWithAggregatesFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
    tax?: DecimalWithAggregatesFilter<"Supplies"> | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: IntFilter<"Invoice"> | number
    userRequest?: StringNullableFilter<"Invoice"> | string | null
    userId?: IntFilter<"Invoice"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    repairs?: InvoiceRepairListRelationFilter
    supplies?: InvoiceSupplieListRelationFilter
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    userRequest?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    repairs?: InvoiceRepairOrderByRelationAggregateInput
    supplies?: InvoiceSupplieOrderByRelationAggregateInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    userRequest?: StringNullableFilter<"Invoice"> | string | null
    userId?: IntFilter<"Invoice"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    repairs?: InvoiceRepairListRelationFilter
    supplies?: InvoiceSupplieListRelationFilter
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    userRequest?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invoice"> | number
    userRequest?: StringNullableWithAggregatesFilter<"Invoice"> | string | null
    userId?: IntWithAggregatesFilter<"Invoice"> | number
  }

  export type InvoiceRepairWhereInput = {
    AND?: InvoiceRepairWhereInput | InvoiceRepairWhereInput[]
    OR?: InvoiceRepairWhereInput[]
    NOT?: InvoiceRepairWhereInput | InvoiceRepairWhereInput[]
    id?: IntFilter<"InvoiceRepair"> | number
    repairId?: StringFilter<"InvoiceRepair"> | string
    unit?: StringFilter<"InvoiceRepair"> | string
    invoiceId?: IntFilter<"InvoiceRepair"> | number
    invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput>
  }

  export type InvoiceRepairOrderByWithRelationInput = {
    id?: SortOrder
    repairId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceRepairWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceRepairWhereInput | InvoiceRepairWhereInput[]
    OR?: InvoiceRepairWhereInput[]
    NOT?: InvoiceRepairWhereInput | InvoiceRepairWhereInput[]
    repairId?: StringFilter<"InvoiceRepair"> | string
    unit?: StringFilter<"InvoiceRepair"> | string
    invoiceId?: IntFilter<"InvoiceRepair"> | number
    invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput>
  }, "id">

  export type InvoiceRepairOrderByWithAggregationInput = {
    id?: SortOrder
    repairId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
    _count?: InvoiceRepairCountOrderByAggregateInput
    _avg?: InvoiceRepairAvgOrderByAggregateInput
    _max?: InvoiceRepairMaxOrderByAggregateInput
    _min?: InvoiceRepairMinOrderByAggregateInput
    _sum?: InvoiceRepairSumOrderByAggregateInput
  }

  export type InvoiceRepairScalarWhereWithAggregatesInput = {
    AND?: InvoiceRepairScalarWhereWithAggregatesInput | InvoiceRepairScalarWhereWithAggregatesInput[]
    OR?: InvoiceRepairScalarWhereWithAggregatesInput[]
    NOT?: InvoiceRepairScalarWhereWithAggregatesInput | InvoiceRepairScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvoiceRepair"> | number
    repairId?: StringWithAggregatesFilter<"InvoiceRepair"> | string
    unit?: StringWithAggregatesFilter<"InvoiceRepair"> | string
    invoiceId?: IntWithAggregatesFilter<"InvoiceRepair"> | number
  }

  export type InvoiceSupplieWhereInput = {
    AND?: InvoiceSupplieWhereInput | InvoiceSupplieWhereInput[]
    OR?: InvoiceSupplieWhereInput[]
    NOT?: InvoiceSupplieWhereInput | InvoiceSupplieWhereInput[]
    id?: IntFilter<"InvoiceSupplie"> | number
    supplieId?: StringFilter<"InvoiceSupplie"> | string
    unit?: StringFilter<"InvoiceSupplie"> | string
    invoiceId?: IntFilter<"InvoiceSupplie"> | number
    invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput>
  }

  export type InvoiceSupplieOrderByWithRelationInput = {
    id?: SortOrder
    supplieId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
    invoice?: InvoiceOrderByWithRelationInput
  }

  export type InvoiceSupplieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceSupplieWhereInput | InvoiceSupplieWhereInput[]
    OR?: InvoiceSupplieWhereInput[]
    NOT?: InvoiceSupplieWhereInput | InvoiceSupplieWhereInput[]
    supplieId?: StringFilter<"InvoiceSupplie"> | string
    unit?: StringFilter<"InvoiceSupplie"> | string
    invoiceId?: IntFilter<"InvoiceSupplie"> | number
    invoice?: XOR<InvoiceRelationFilter, InvoiceWhereInput>
  }, "id">

  export type InvoiceSupplieOrderByWithAggregationInput = {
    id?: SortOrder
    supplieId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
    _count?: InvoiceSupplieCountOrderByAggregateInput
    _avg?: InvoiceSupplieAvgOrderByAggregateInput
    _max?: InvoiceSupplieMaxOrderByAggregateInput
    _min?: InvoiceSupplieMinOrderByAggregateInput
    _sum?: InvoiceSupplieSumOrderByAggregateInput
  }

  export type InvoiceSupplieScalarWhereWithAggregatesInput = {
    AND?: InvoiceSupplieScalarWhereWithAggregatesInput | InvoiceSupplieScalarWhereWithAggregatesInput[]
    OR?: InvoiceSupplieScalarWhereWithAggregatesInput[]
    NOT?: InvoiceSupplieScalarWhereWithAggregatesInput | InvoiceSupplieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InvoiceSupplie"> | number
    supplieId?: StringWithAggregatesFilter<"InvoiceSupplie"> | string
    unit?: StringWithAggregatesFilter<"InvoiceSupplie"> | string
    invoiceId?: IntWithAggregatesFilter<"InvoiceSupplie"> | number
  }

  export type UserCreateInput = {
    email?: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName?: string | null
    carType?: string | null
    joinDate: Date | string
    invoices?: InvoiceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email?: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName?: string | null
    carType?: string | null
    joinDate: Date | string
    invoices?: InvoiceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
    invoices?: InvoiceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email?: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName?: string | null
    carType?: string | null
    joinDate: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReparisCreateInput = {
    repairsCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type ReparisUncheckedCreateInput = {
    id?: number
    repairsCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type ReparisUpdateInput = {
    repairsCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ReparisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairsCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ReparisCreateManyInput = {
    id?: number
    repairsCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type ReparisUpdateManyMutationInput = {
    repairsCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ReparisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairsCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesCreateInput = {
    suppliesCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type SuppliesUncheckedCreateInput = {
    id?: number
    suppliesCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type SuppliesUpdateInput = {
    suppliesCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    suppliesCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesCreateManyInput = {
    id?: number
    suppliesCode: string
    description?: string | null
    countUnit?: string | null
    priceUnit: Decimal | DecimalJsLike | number | string
    ck: Decimal | DecimalJsLike | number | string
    tax: Decimal | DecimalJsLike | number | string
  }

  export type SuppliesUpdateManyMutationInput = {
    suppliesCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type SuppliesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    suppliesCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    countUnit?: NullableStringFieldUpdateOperationsInput | string | null
    priceUnit?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    ck?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tax?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type InvoiceCreateInput = {
    userRequest?: string | null
    user: UserCreateNestedOneWithoutInvoicesInput
    repairs?: InvoiceRepairCreateNestedManyWithoutInvoiceInput
    supplies?: InvoiceSupplieCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    userRequest?: string | null
    userId: number
    repairs?: InvoiceRepairUncheckedCreateNestedManyWithoutInvoiceInput
    supplies?: InvoiceSupplieUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUpdateInput = {
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    repairs?: InvoiceRepairUpdateManyWithoutInvoiceNestedInput
    supplies?: InvoiceSupplieUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    repairs?: InvoiceRepairUncheckedUpdateManyWithoutInvoiceNestedInput
    supplies?: InvoiceSupplieUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyInput = {
    id?: number
    userRequest?: string | null
    userId: number
  }

  export type InvoiceUpdateManyMutationInput = {
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceRepairCreateInput = {
    repairId: string
    unit: string
    invoice: InvoiceCreateNestedOneWithoutRepairsInput
  }

  export type InvoiceRepairUncheckedCreateInput = {
    id?: number
    repairId: string
    unit: string
    invoiceId: number
  }

  export type InvoiceRepairUpdateInput = {
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoice?: InvoiceUpdateOneRequiredWithoutRepairsNestedInput
  }

  export type InvoiceRepairUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceRepairCreateManyInput = {
    id?: number
    repairId: string
    unit: string
    invoiceId: number
  }

  export type InvoiceRepairUpdateManyMutationInput = {
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceRepairUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceSupplieCreateInput = {
    supplieId: string
    unit: string
    invoice: InvoiceCreateNestedOneWithoutSuppliesInput
  }

  export type InvoiceSupplieUncheckedCreateInput = {
    id?: number
    supplieId: string
    unit: string
    invoiceId: number
  }

  export type InvoiceSupplieUpdateInput = {
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoice?: InvoiceUpdateOneRequiredWithoutSuppliesNestedInput
  }

  export type InvoiceSupplieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type InvoiceSupplieCreateManyInput = {
    id?: number
    supplieId: string
    unit: string
    invoiceId: number
  }

  export type InvoiceSupplieUpdateManyMutationInput = {
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceSupplieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    invoiceId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    code?: SortOrder
    phoneNumber?: SortOrder
    plateNumber?: SortOrder
    address?: SortOrder
    carName?: SortOrder
    carType?: SortOrder
    joinDate?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    code?: SortOrder
    phoneNumber?: SortOrder
    plateNumber?: SortOrder
    address?: SortOrder
    carName?: SortOrder
    carType?: SortOrder
    joinDate?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    code?: SortOrder
    phoneNumber?: SortOrder
    plateNumber?: SortOrder
    address?: SortOrder
    carName?: SortOrder
    carType?: SortOrder
    joinDate?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ReparisCountOrderByAggregateInput = {
    id?: SortOrder
    repairsCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type ReparisAvgOrderByAggregateInput = {
    id?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type ReparisMaxOrderByAggregateInput = {
    id?: SortOrder
    repairsCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type ReparisMinOrderByAggregateInput = {
    id?: SortOrder
    repairsCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type ReparisSumOrderByAggregateInput = {
    id?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type SuppliesCountOrderByAggregateInput = {
    id?: SortOrder
    suppliesCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type SuppliesAvgOrderByAggregateInput = {
    id?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type SuppliesMaxOrderByAggregateInput = {
    id?: SortOrder
    suppliesCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type SuppliesMinOrderByAggregateInput = {
    id?: SortOrder
    suppliesCode?: SortOrder
    description?: SortOrder
    countUnit?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type SuppliesSumOrderByAggregateInput = {
    id?: SortOrder
    priceUnit?: SortOrder
    ck?: SortOrder
    tax?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type InvoiceRepairListRelationFilter = {
    every?: InvoiceRepairWhereInput
    some?: InvoiceRepairWhereInput
    none?: InvoiceRepairWhereInput
  }

  export type InvoiceSupplieListRelationFilter = {
    every?: InvoiceSupplieWhereInput
    some?: InvoiceSupplieWhereInput
    none?: InvoiceSupplieWhereInput
  }

  export type InvoiceRepairOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceSupplieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    userRequest?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    userRequest?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    userRequest?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type InvoiceRelationFilter = {
    is?: InvoiceWhereInput
    isNot?: InvoiceWhereInput
  }

  export type InvoiceRepairCountOrderByAggregateInput = {
    id?: SortOrder
    repairId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceRepairAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceRepairMaxOrderByAggregateInput = {
    id?: SortOrder
    repairId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceRepairMinOrderByAggregateInput = {
    id?: SortOrder
    repairId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceRepairSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceSupplieCountOrderByAggregateInput = {
    id?: SortOrder
    supplieId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceSupplieAvgOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceSupplieMaxOrderByAggregateInput = {
    id?: SortOrder
    supplieId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceSupplieMinOrderByAggregateInput = {
    id?: SortOrder
    supplieId?: SortOrder
    unit?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceSupplieSumOrderByAggregateInput = {
    id?: SortOrder
    invoiceId?: SortOrder
  }

  export type InvoiceCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type InvoiceUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InvoiceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput> | InvoiceCreateWithoutUserInput[] | InvoiceUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutUserInput | InvoiceCreateOrConnectWithoutUserInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutUserInput | InvoiceUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InvoiceCreateManyUserInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutUserInput | InvoiceUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutUserInput | InvoiceUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type InvoiceRepairCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput> | InvoiceRepairCreateWithoutInvoiceInput[] | InvoiceRepairUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceRepairCreateOrConnectWithoutInvoiceInput | InvoiceRepairCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceRepairCreateManyInvoiceInputEnvelope
    connect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
  }

  export type InvoiceSupplieCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput> | InvoiceSupplieCreateWithoutInvoiceInput[] | InvoiceSupplieUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceSupplieCreateOrConnectWithoutInvoiceInput | InvoiceSupplieCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceSupplieCreateManyInvoiceInputEnvelope
    connect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
  }

  export type InvoiceRepairUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput> | InvoiceRepairCreateWithoutInvoiceInput[] | InvoiceRepairUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceRepairCreateOrConnectWithoutInvoiceInput | InvoiceRepairCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceRepairCreateManyInvoiceInputEnvelope
    connect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
  }

  export type InvoiceSupplieUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput> | InvoiceSupplieCreateWithoutInvoiceInput[] | InvoiceSupplieUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceSupplieCreateOrConnectWithoutInvoiceInput | InvoiceSupplieCreateOrConnectWithoutInvoiceInput[]
    createMany?: InvoiceSupplieCreateManyInvoiceInputEnvelope
    connect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    upsert?: UserUpsertWithoutInvoicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvoicesInput, UserUpdateWithoutInvoicesInput>, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type InvoiceRepairUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput> | InvoiceRepairCreateWithoutInvoiceInput[] | InvoiceRepairUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceRepairCreateOrConnectWithoutInvoiceInput | InvoiceRepairCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceRepairUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceRepairUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceRepairCreateManyInvoiceInputEnvelope
    set?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    disconnect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    delete?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    connect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    update?: InvoiceRepairUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceRepairUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceRepairUpdateManyWithWhereWithoutInvoiceInput | InvoiceRepairUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceRepairScalarWhereInput | InvoiceRepairScalarWhereInput[]
  }

  export type InvoiceSupplieUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput> | InvoiceSupplieCreateWithoutInvoiceInput[] | InvoiceSupplieUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceSupplieCreateOrConnectWithoutInvoiceInput | InvoiceSupplieCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceSupplieUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceSupplieUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceSupplieCreateManyInvoiceInputEnvelope
    set?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    disconnect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    delete?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    connect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    update?: InvoiceSupplieUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceSupplieUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceSupplieUpdateManyWithWhereWithoutInvoiceInput | InvoiceSupplieUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceSupplieScalarWhereInput | InvoiceSupplieScalarWhereInput[]
  }

  export type InvoiceRepairUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput> | InvoiceRepairCreateWithoutInvoiceInput[] | InvoiceRepairUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceRepairCreateOrConnectWithoutInvoiceInput | InvoiceRepairCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceRepairUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceRepairUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceRepairCreateManyInvoiceInputEnvelope
    set?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    disconnect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    delete?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    connect?: InvoiceRepairWhereUniqueInput | InvoiceRepairWhereUniqueInput[]
    update?: InvoiceRepairUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceRepairUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceRepairUpdateManyWithWhereWithoutInvoiceInput | InvoiceRepairUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceRepairScalarWhereInput | InvoiceRepairScalarWhereInput[]
  }

  export type InvoiceSupplieUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput> | InvoiceSupplieCreateWithoutInvoiceInput[] | InvoiceSupplieUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: InvoiceSupplieCreateOrConnectWithoutInvoiceInput | InvoiceSupplieCreateOrConnectWithoutInvoiceInput[]
    upsert?: InvoiceSupplieUpsertWithWhereUniqueWithoutInvoiceInput | InvoiceSupplieUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: InvoiceSupplieCreateManyInvoiceInputEnvelope
    set?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    disconnect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    delete?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    connect?: InvoiceSupplieWhereUniqueInput | InvoiceSupplieWhereUniqueInput[]
    update?: InvoiceSupplieUpdateWithWhereUniqueWithoutInvoiceInput | InvoiceSupplieUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: InvoiceSupplieUpdateManyWithWhereWithoutInvoiceInput | InvoiceSupplieUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: InvoiceSupplieScalarWhereInput | InvoiceSupplieScalarWhereInput[]
  }

  export type InvoiceCreateNestedOneWithoutRepairsInput = {
    create?: XOR<InvoiceCreateWithoutRepairsInput, InvoiceUncheckedCreateWithoutRepairsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutRepairsInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutRepairsNestedInput = {
    create?: XOR<InvoiceCreateWithoutRepairsInput, InvoiceUncheckedCreateWithoutRepairsInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutRepairsInput
    upsert?: InvoiceUpsertWithoutRepairsInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutRepairsInput, InvoiceUpdateWithoutRepairsInput>, InvoiceUncheckedUpdateWithoutRepairsInput>
  }

  export type InvoiceCreateNestedOneWithoutSuppliesInput = {
    create?: XOR<InvoiceCreateWithoutSuppliesInput, InvoiceUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSuppliesInput
    connect?: InvoiceWhereUniqueInput
  }

  export type InvoiceUpdateOneRequiredWithoutSuppliesNestedInput = {
    create?: XOR<InvoiceCreateWithoutSuppliesInput, InvoiceUncheckedCreateWithoutSuppliesInput>
    connectOrCreate?: InvoiceCreateOrConnectWithoutSuppliesInput
    upsert?: InvoiceUpsertWithoutSuppliesInput
    connect?: InvoiceWhereUniqueInput
    update?: XOR<XOR<InvoiceUpdateToOneWithWhereWithoutSuppliesInput, InvoiceUpdateWithoutSuppliesInput>, InvoiceUncheckedUpdateWithoutSuppliesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type InvoiceCreateWithoutUserInput = {
    userRequest?: string | null
    repairs?: InvoiceRepairCreateNestedManyWithoutInvoiceInput
    supplies?: InvoiceSupplieCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutUserInput = {
    id?: number
    userRequest?: string | null
    repairs?: InvoiceRepairUncheckedCreateNestedManyWithoutInvoiceInput
    supplies?: InvoiceSupplieUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceCreateManyUserInputEnvelope = {
    data: InvoiceCreateManyUserInput | InvoiceCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceUpsertWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
    create: XOR<InvoiceCreateWithoutUserInput, InvoiceUncheckedCreateWithoutUserInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutUserInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutUserInput, InvoiceUncheckedUpdateWithoutUserInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutUserInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutUserInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: IntFilter<"Invoice"> | number
    userRequest?: StringNullableFilter<"Invoice"> | string | null
    userId?: IntFilter<"Invoice"> | number
  }

  export type UserCreateWithoutInvoicesInput = {
    email?: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName?: string | null
    carType?: string | null
    joinDate: Date | string
  }

  export type UserUncheckedCreateWithoutInvoicesInput = {
    id?: number
    email?: string | null
    name: string
    code: string
    phoneNumber: string
    plateNumber: string
    address: string
    carName?: string | null
    carType?: string | null
    joinDate: Date | string
  }

  export type UserCreateOrConnectWithoutInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type InvoiceRepairCreateWithoutInvoiceInput = {
    repairId: string
    unit: string
  }

  export type InvoiceRepairUncheckedCreateWithoutInvoiceInput = {
    id?: number
    repairId: string
    unit: string
  }

  export type InvoiceRepairCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceRepairWhereUniqueInput
    create: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceRepairCreateManyInvoiceInputEnvelope = {
    data: InvoiceRepairCreateManyInvoiceInput | InvoiceRepairCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceSupplieCreateWithoutInvoiceInput = {
    supplieId: string
    unit: string
  }

  export type InvoiceSupplieUncheckedCreateWithoutInvoiceInput = {
    id?: number
    supplieId: string
    unit: string
  }

  export type InvoiceSupplieCreateOrConnectWithoutInvoiceInput = {
    where: InvoiceSupplieWhereUniqueInput
    create: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceSupplieCreateManyInvoiceInputEnvelope = {
    data: InvoiceSupplieCreateManyInvoiceInput | InvoiceSupplieCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInvoicesInput = {
    update: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserUpdateWithoutInvoicesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    plateNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    carName?: NullableStringFieldUpdateOperationsInput | string | null
    carType?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceRepairUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceRepairWhereUniqueInput
    update: XOR<InvoiceRepairUpdateWithoutInvoiceInput, InvoiceRepairUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceRepairCreateWithoutInvoiceInput, InvoiceRepairUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceRepairUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceRepairWhereUniqueInput
    data: XOR<InvoiceRepairUpdateWithoutInvoiceInput, InvoiceRepairUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceRepairUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceRepairScalarWhereInput
    data: XOR<InvoiceRepairUpdateManyMutationInput, InvoiceRepairUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceRepairScalarWhereInput = {
    AND?: InvoiceRepairScalarWhereInput | InvoiceRepairScalarWhereInput[]
    OR?: InvoiceRepairScalarWhereInput[]
    NOT?: InvoiceRepairScalarWhereInput | InvoiceRepairScalarWhereInput[]
    id?: IntFilter<"InvoiceRepair"> | number
    repairId?: StringFilter<"InvoiceRepair"> | string
    unit?: StringFilter<"InvoiceRepair"> | string
    invoiceId?: IntFilter<"InvoiceRepair"> | number
  }

  export type InvoiceSupplieUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceSupplieWhereUniqueInput
    update: XOR<InvoiceSupplieUpdateWithoutInvoiceInput, InvoiceSupplieUncheckedUpdateWithoutInvoiceInput>
    create: XOR<InvoiceSupplieCreateWithoutInvoiceInput, InvoiceSupplieUncheckedCreateWithoutInvoiceInput>
  }

  export type InvoiceSupplieUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: InvoiceSupplieWhereUniqueInput
    data: XOR<InvoiceSupplieUpdateWithoutInvoiceInput, InvoiceSupplieUncheckedUpdateWithoutInvoiceInput>
  }

  export type InvoiceSupplieUpdateManyWithWhereWithoutInvoiceInput = {
    where: InvoiceSupplieScalarWhereInput
    data: XOR<InvoiceSupplieUpdateManyMutationInput, InvoiceSupplieUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type InvoiceSupplieScalarWhereInput = {
    AND?: InvoiceSupplieScalarWhereInput | InvoiceSupplieScalarWhereInput[]
    OR?: InvoiceSupplieScalarWhereInput[]
    NOT?: InvoiceSupplieScalarWhereInput | InvoiceSupplieScalarWhereInput[]
    id?: IntFilter<"InvoiceSupplie"> | number
    supplieId?: StringFilter<"InvoiceSupplie"> | string
    unit?: StringFilter<"InvoiceSupplie"> | string
    invoiceId?: IntFilter<"InvoiceSupplie"> | number
  }

  export type InvoiceCreateWithoutRepairsInput = {
    userRequest?: string | null
    user: UserCreateNestedOneWithoutInvoicesInput
    supplies?: InvoiceSupplieCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutRepairsInput = {
    id?: number
    userRequest?: string | null
    userId: number
    supplies?: InvoiceSupplieUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutRepairsInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutRepairsInput, InvoiceUncheckedCreateWithoutRepairsInput>
  }

  export type InvoiceUpsertWithoutRepairsInput = {
    update: XOR<InvoiceUpdateWithoutRepairsInput, InvoiceUncheckedUpdateWithoutRepairsInput>
    create: XOR<InvoiceCreateWithoutRepairsInput, InvoiceUncheckedCreateWithoutRepairsInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutRepairsInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutRepairsInput, InvoiceUncheckedUpdateWithoutRepairsInput>
  }

  export type InvoiceUpdateWithoutRepairsInput = {
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    supplies?: InvoiceSupplieUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutRepairsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    supplies?: InvoiceSupplieUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateWithoutSuppliesInput = {
    userRequest?: string | null
    user: UserCreateNestedOneWithoutInvoicesInput
    repairs?: InvoiceRepairCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateWithoutSuppliesInput = {
    id?: number
    userRequest?: string | null
    userId: number
    repairs?: InvoiceRepairUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type InvoiceCreateOrConnectWithoutSuppliesInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSuppliesInput, InvoiceUncheckedCreateWithoutSuppliesInput>
  }

  export type InvoiceUpsertWithoutSuppliesInput = {
    update: XOR<InvoiceUpdateWithoutSuppliesInput, InvoiceUncheckedUpdateWithoutSuppliesInput>
    create: XOR<InvoiceCreateWithoutSuppliesInput, InvoiceUncheckedCreateWithoutSuppliesInput>
    where?: InvoiceWhereInput
  }

  export type InvoiceUpdateToOneWithWhereWithoutSuppliesInput = {
    where?: InvoiceWhereInput
    data: XOR<InvoiceUpdateWithoutSuppliesInput, InvoiceUncheckedUpdateWithoutSuppliesInput>
  }

  export type InvoiceUpdateWithoutSuppliesInput = {
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutInvoicesNestedInput
    repairs?: InvoiceRepairUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutSuppliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    repairs?: InvoiceRepairUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceCreateManyUserInput = {
    id?: number
    userRequest?: string | null
  }

  export type InvoiceUpdateWithoutUserInput = {
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    repairs?: InvoiceRepairUpdateManyWithoutInvoiceNestedInput
    supplies?: InvoiceSupplieUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
    repairs?: InvoiceRepairUncheckedUpdateManyWithoutInvoiceNestedInput
    supplies?: InvoiceSupplieUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userRequest?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceRepairCreateManyInvoiceInput = {
    id?: number
    repairId: string
    unit: string
  }

  export type InvoiceSupplieCreateManyInvoiceInput = {
    id?: number
    supplieId: string
    unit: string
  }

  export type InvoiceRepairUpdateWithoutInvoiceInput = {
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceRepairUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceRepairUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    repairId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceSupplieUpdateWithoutInvoiceInput = {
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceSupplieUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }

  export type InvoiceSupplieUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    supplieId?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceCountOutputTypeDefaultArgs instead
     */
    export type InvoiceCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReparisDefaultArgs instead
     */
    export type ReparisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReparisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuppliesDefaultArgs instead
     */
    export type SuppliesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuppliesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceDefaultArgs instead
     */
    export type InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceRepairDefaultArgs instead
     */
    export type InvoiceRepairArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceRepairDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvoiceSupplieDefaultArgs instead
     */
    export type InvoiceSupplieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvoiceSupplieDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}